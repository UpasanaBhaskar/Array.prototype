1. Upasana:
	
--> Array.prototype.slice():
		This method returns a shallow copy of a portion of an array.
			Syntax -> slice(start, end)
				Example : let myArray = ['a', 'b', 'c', 'd', 'e'];
						  let newArray1 = myArray.slice(1, 4); // Output: ['b', 'c', 'd']
						  let newArray2 = myArray.slice(2); // Output: ['c', 'd', 'e']
						  let newArray3 = myArray.slice(); // Output: a shallow copy of the entire array

-->	Array.prototype.splice():
		This method allows to add, remove, or replace elements in an array.
		 	Syntax -> splice(start, deleteCount, item1, item2, ...)
				Example : let array = [1, 2, 3, 4];
					      let arr1 = array.splice(2, 0, 5, 6); // Output: [1, 2, 5, 6, 3, 4]
					      let arr2 = array.splice(2, 2); // Output: [1, 2]
					      let arr3 = array.splice(1, 2, 'a', 'b', 'c'); // Output: [1, 'a', 'b', 'c', 4]

--> Array.prototype.unshift():
		This method allows to add one or more elements to the beginning of an array.
			Syntax -> unshift(element1, element2, ..., elementN)
				Example : let array = [1, 2, 3];
					  	  let array1 = array.unshift(0); // Output: [0, 1, 2, 3]
					      let array2 = array.unshift(-2, -1, 0); // Output: [-2, -1, 0, 1, 2, 3]
					  	  let array3 = [4, 5, 6]; 
					  	  let array4 = array1.unshift(...array2); // Output: [4, 5, 6, 1, 2, 3]

--> Array.prototype.values():
		This method returns an iterator object that contains the values of an array.
			Syntax -> values()
				Example	: let array = [1, 2, 3];
						  let valuesIterator = array.values();
						  console.log(valuesIterator.next()); // Output: { value: 1, done: false }
						  console.log(valuesIterator.next()); // Output: { value: 2, done: false }
 						  console.log(valuesIterator.next()); // Output: { value: 3, done: false }
						  console.log(valuesIterator.next()); // Output: { value: undefined, done: true }


2. kalaivani:
	Array.prototype.slice():
	      The method returns selected elements in an array(as a new array).         
	Array.prototype.splice():
	Array.prototype.unshift():
	Array.prototype.values():

3. Akileswari:
	Array.prototype.slice():
	Array.prototype.splice():
	Array.prototype.unshift():
	Array.prototype.values():


4. Jeba Danita:

	----> Array.prototype.slice():
	    -> Definition : The slice() method returns a shallow copy of a portion of an array into a new array object selected from start to end. The start and end represent the index of items in that array.
		-> Syntax : slice(start, end)
		-> Example : const animals = ['ant', 'bison', 'camel', 'duck', 'elephant'];
		             console.log(animals.slice(2)); // Output: Array ["camel", "duck", "elephant"]
		             console.log(animals.slice(2, 4)); // Output: Array ["camel", "duck"]
		             console.log(animals.slice(1, 5)); // Output: Array ["bison", "camel", "duck", "elephant"]
		
		
    ----> Array.prototype.splice():
	    -> Definition : The splice() method changes the contents of an array by removing or replacing the existing elements and/or adding new elements in that place where the element was removed.
		-> Syntax : splice(start, deleteCount, item1)
		-> Example : const months = ['Jan', 'March', 'April', 'June'];
                     months.splice(1, 0, 'Feb'); // Inserts at index 1
			         console.log(months); //Output : Array ["Jan", "Feb", "March", "April", "June"] 
			    
			    
    ----> Array.prototype.unshift():
	    -> Definition : The unshift() method adds one or more elements to the beginning of an array and returns the new length of the array.
		-> Syntax : unshift(element0, element1,......, elementn)
		-> Example : const array1 = [1, 2, 3]
		             console.log(array1.unshift(4, 5));
		             console.log(array1); // Output: Array [4, 5, 1, 2, 3]
			     
			     
    ----> Array.prototype.values():
        -> Definition : The values() method returns a new array iterator object that iterates the value of each item in the array.
		-> Syntax : values()
	    -> Example : const array1 = ['a', 'b', 'c'];
                             const iterator = array1.values();
			     for (const value of iterator) {
			     console.log(value);
			     }  // Output: "a"
                    // Output: "b"
                    // Output: "c"
			       
			     const arr = ["a", "b", "c", "d", "e"]; 
			     const iterator = arr.values();
			     iterator.next(); // { value: "a", done: false }
			     iterator.next(); // { value: "b", done: false }
			     iterator.next(); // { value: "c", done: false }
			     iterator.next(); // { value: "d", done: false }
			     iterator.next(); // { value: "e", done: false }
			     iterator.next(); // { value: undefined, done: true }