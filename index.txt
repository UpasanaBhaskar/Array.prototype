1. Upasana:
	
--> Array.prototype.slice():
		This method returns a shallow copy of a portion of an array.
			Syntax -> slice(start, end)
				Example : let myArray = ['a', 'b', 'c', 'd', 'e'];
						  let newArray1 = myArray.slice(1, 4); // Output: ['b', 'c', 'd']
						  let newArray2 = myArray.slice(2); // Output: ['c', 'd', 'e']
						  let newArray3 = myArray.slice(); // Output: a shallow copy of the entire array

-->	Array.prototype.splice():
		This method allows to add, remove, or replace elements in an array.
		 	Syntax -> splice(start, deleteCount, item1, item2, ...)
				Example : let array = [1, 2, 3, 4];
					      let arr1 = array.splice(2, 0, 5, 6); // Output: [1, 2, 5, 6, 3, 4]
					      let arr2 = array.splice(2, 2); // Output: [1, 2]
					      let arr3 = array.splice(1, 2, 'a', 'b', 'c'); // Output: [1, 'a', 'b', 'c', 4]

--> Array.prototype.unshift():
		This method allows to add one or more elements to the beginning of an array.
			Syntax -> unshift(element1, element2, ..., elementN)
				Example : let array = [1, 2, 3];
					  	  let array1 = array.unshift(0); // Output: [0, 1, 2, 3]
					      let array2 = array.unshift(-2, -1, 0); // Output: [-2, -1, 0, 1, 2, 3]
					  	  let array3 = [4, 5, 6]; 
					  	  let array4 = array1.unshift(...array2); // Output: [4, 5, 6, 1, 2, 3]

--> Array.prototype.values():
		This method returns an iterator object that contains the values of an array.
			Syntax -> values()
				Example	: let array = [1, 2, 3];
						  let valuesIterator = array.values();
						  console.log(valuesIterator.next()); // Output: { value: 1, done: false }
						  console.log(valuesIterator.next()); // Output: { value: 2, done: false }
 						  console.log(valuesIterator.next()); // Output: { value: 3, done: false }
						  console.log(valuesIterator.next()); // Output: { value: undefined, done: true }


2. kalaivani:
	Array.prototype.slice():
	Array.prototype.splice():
	Array.prototype.unshift():
	Array.prototype.values():

3. Akileswari:

	a-->>Array.prototype.slice(): 
	       slice() --Syntax
		   creates a new array, so any changes made to the new array will not affect the original array. 
	       Similarly, any changes made to the original array will not affect the new array 
	       In this we have two paramater start ,end slice(start,end) .in this we cam also give negative value (-1),slice begins from end of array
	    e.g >>Example :
	          const myArray = [1, 2, 3, 4, 5];
              const slicedArray = myArray.slice(1, 4); // Output: [2, 3, 4]
              const copiedArray = myArray.slice(); // Output: [1, 2, 3, 4, 5] //it copies the array print the full array value
			  const slicedArray = myArray.slice(-4, -1); // [2, 3, 4] //its starts from the 4th from thelast element end before -1 and also the second parameter is optional ,If the second parameter is omitted, the slice extends to the end of the array.
	
	b-->>Array.prototype.splice(): 
	          it is used to insert, remove, or replace elements in an array.
	          The method modifies the original array in place and returns an array of the removed elements

              array.splice(startIndex, deleteCount, item1, item2, ...)--Syntax

	      e.g >>Example: removing element

			    const myArray = [1, 2, 3, 4, 5];
                const removedElements = myArray.splice(2, 2);// in this removed two elements from the starting index of 2
                console.log(myArray); // Output: [1, 2, 5] //the modified array
                console.log(removedElements); // Output: [3, 4] //these are the removed element
            >>Inserting elements into an array

			     const myArray = [1, 2, 3, 4, 5];
                 myArray.splice(2, 0, "a", "b", "c"); // add the element from index of 2 and the deleting count 0 ,a b c values are inserted after 2
                 console.log(myArray); // Output: [1, 2, "a", "b", "c", 3, 4, 5]
			>>replacing element 

			    const myArray = [1, 2, 3, 4, 5];
                const removedElements = myArray.splice(1, 3, "a", "b", "c");// start from inex 1 and the count fo deleting is 3 so the "345"are removed and "abc" value added
                console.log(myArray); // Output: [1, "a", "b", "c", 5]
                console.log(removedElements); // Output: [2, 3, 4]

	c-->> Array.prototype.unshift():
	          adds one or more elements to the beginning of an array and returns the new length of the modified array.
              It's important to note that unshift() modifies the original array and returns its new length. So, if we assign the result of unshift() to a variable, 
			  that variable will hold the new length of the modified array.  

              arr.unshift(element1, element2, ..., elementN)--Syntax

          e.g>>> Example:
		      const fruits = ["banana", "orange", "apple"];
			  fruits.unshift("grape");// output : ["grape", "banana", "orange", "apple"]
	          fruits.unshift("mango", "kiwi"); : // output: ["mango", "kiwi", "grape", "banana", "orange", "apple"]
            const newLength = fruits.unshift("pear"); // output : ["pear", "mango", "kiwi", "grape", "banana", "orange", "apple"].

	 d-->> Array.prototype.values(): 
	         values()--Syntax
             returns an iterator object that contains the values for each index in the array.
        e.g>>example 
		     const arr = ["apple", "banana", "orange"];
             const iterator = arr.values();
             for (const value of iterator) {
            console.log(value);
			} //output: apple banana orange
      We can also use the spread operator (...) to convert the iterator object to an array of values:
         e.g>.example 
		    const arr = ["apple", "banana", "orange"];
		    const iterator = arr.values(); 
		    const valuesArray = [...iterator];
	         console.log(valuesArray); // ["apple", "banana", "orange"]




4. Jeba Danita:
	Array.prototype.slice():
	Array.prototype.splice():
	Array.prototype.unshift():
	Array.prototype.values():
